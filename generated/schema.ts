// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AuctionBidEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionBidEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionBidEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionBidEntity", id.toString(), this);
  }

  static load(id: string): AuctionBidEntity | null {
    return store.get("AuctionBidEntity", id) as AuctionBidEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  // get count(): BigInt {
  //   let value = this.get("count");
  //   return value.toBigInt();
  // }

  // set count(value: BigInt) {
  //   this.set("count", Value.fromBigInt(value));
  // }

  get nftId(): BigInt {
    let value = this.get("nftId");
    return value.toBigInt();
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get bidPrice(): BigInt {
    let value = this.get("bidPrice");
    return value.toBigInt();
  }

  set bidPrice(value: BigInt) {
    this.set("bidPrice", Value.fromBigInt(value));
  }

  get bidder(): Address {
    return this.get("bidder").toAddress();
  }

  set bidder(value: Address) {
    this.set("bidder", Value.fromAddress(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}
